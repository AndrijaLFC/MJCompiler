
package ba140645d.mjcompiler.ast;

import java_cup.runtime.*;
import java.io.*;
import org.apache.log4j.*;


parser code {:


	boolean errorDetected = false;


	Logger log = Logger.getLogger(getClass());



    // slede redefinisani metodi za prijavu gresaka radi izmene teksta poruke

    public void report_fatal_error(String message, Object info) throws java.lang.Exception {
      done_parsing();
      report_error(message, info);
    }

    public void syntax_error(Symbol cur_token) {
        report_error("\nSintaksna greska", cur_token);
    }

    public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
        report_fatal_error("Fatalna greska, parsiranje se ne moze nastaviti", cur_token);
    }

    public void report_error(String message, Object info) {
    	errorDetected = true;
    	StringBuilder msg = new StringBuilder(message);
    	if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left);
        log.error(msg.toString());
    }

    public void report_info(String message, Object info) {
    	StringBuilder msg = new StringBuilder(message);
    	if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left);
        log.info(msg.toString());
    }


:}

scan with {:
	Symbol s = this.getScanner().next_token();
	if (s != null && s.value != null)
		log.info(s.toString() + " " + s.value.toString());
	return s;
:}


/*******************************************
********    Terminalni simboli    **********
********************************************/


// kljucne reci
terminal PROGRAM, BREAK, CLASS, ELSE, IF, NEW, PRINT, READ, RETURN, VOID, DO, WHILE, EXTENDS, CONTINUE, CONST ;


// identifikator
terminal String IDENTIFIKATOR ;


// konstante
terminal Integer NUM_CONST;
terminal Character CHAR_CONST;
terminal java.lang.Boolean BOOL_CONST;

// Addop operatori
terminal OP_ADDITION, OP_SUBTRACTION ;

// mulop operatori
terminal OP_MULTIPLICATION, OP_DIVISION, OP_MODUO ;


// relop operatori
terminal OP_EQUALS, OP_NOT_EQUALS, OP_GREATER, OP_GREATER_EQUAL, OP_LESSER, OP_LESSER_EQUAL;

// logic operatori
terminal OP_LOGIC_AND, OP_LOGIC_OR ;

// operator dodele,inkrement, dekrement, tacka-zarez, zarez, tacka
terminal OP_EQUAL, OP_INCREMENT, OP_DECREMENT, OP_SEMICOLN, OP_COMMA, OP_DOT;

// operatori zagrade
terminal OP_L_PARENTHESES, OP_R_PARENTHESES, OP_L_SQUARED_PARENTHESES, OP_R_SQUARED_PARENTHESES, OP_L_BRACE_PARENTHESES, OP_R_BRACE_PARENTHESES;

/*********************************************
********    Neterminalni simboli    **********
**********************************************/



non terminal Program Program;
nonterminal ConstVarClassDeclList ConstVarClassDeclList;
nonterminal ConstDecl ConstDecl;
nonterminal ConstDeclRepeatList ConstDeclRepeatList;
nonterminal ConstDeclRepeat ConstDeclRepeat;
non terminal VarDecl VarDecl;
nonterminal VarDeclList VarDeclList;
nonterminal VarDeclRepeatList VarDeclRepeatList;
nonterminal VarDeclRepeat VarDeclRepeat;
nonterminal OptArrayDecl OptArrayDecl;
nonterminal Type Type;
nonterminal StatementList StatementList;
non terminal ClassDecl ClassDecl;
nonterminal OptExtends OptExtends;
nonterminal OptMethodDeclList OptMethodDeclList;
non terminal MethodDeclList MethodDeclList;
nonterminal MethodDecl MethodDecl;
nonterminal ReturnType ReturnType;
nonterminal OptFormPars OptFormPars;
non terminal FormPars FormPars;
nonterminal FormParsRepeatList FormParsRepeatList;
nonterminal FormParsRepeat FormParsRepeat;


non terminal Statement Statement;
nonterminal OptElseStatement OptElseStatement;
nonterminal DesignatorStatement DesignatorStatement;

non terminal Relop Relop;
non terminal ProgramName ProgramName;
nonterminal ClassName ClassName;



non terminal OptPrintNumConst OptPrintNumConst;
nonterminal ConstDefinition ConstDefinition;
non terminal VarDeclDefinition VarDeclDefinition;

non terminal MethodName MethodName ;

non terminal FormParDecl FormParDecl ;

non terminal ConstValue ConstValue;
non terminal DoWhileBegin DoWhileBegin;
non terminal DoWhileEnd DoWhileEnd;

non terminal ClassDefinitionStart ClassDefinitionStart;
non terminal ClassDefinitionEnd ClassDefinitionEnd;

non terminal rs.etf.pp1.symboltable.concepts.Obj Designator, DesignatorRepeatList, DesignatorRepeat;
non terminal rs.etf.pp1.symboltable.concepts.Obj DesignatorInitialName;

non terminal ba140645d.mjcompiler.utilities.StructLinkedList OptParenthesesActPars;
non terminal ba140645d.mjcompiler.utilities.StructLinkedList ActPars;
non terminal ba140645d.mjcompiler.utilities.StructLinkedList ActParsRepeatList;
non terminal ba140645d.mjcompiler.utilities.StructLinkedList OptActPars;
non terminal rs.etf.pp1.symboltable.concepts.Struct ActParsRepeat;
non terminal rs.etf.pp1.symboltable.concepts.Struct OptArrExpr;

non terminal rs.etf.pp1.symboltable.concepts.Struct Expr, Term, AddopTermList;
non terminal rs.etf.pp1.symboltable.concepts.Struct Factor, MulopFactorList;
non terminal rs.etf.pp1.symboltable.concepts.Struct MulopFactor;
non terminal rs.etf.pp1.symboltable.concepts.Struct Mulop;
non terminal rs.etf.pp1.symboltable.concepts.Struct AddopTerm, Addop;
non terminal rs.etf.pp1.symboltable.concepts.Struct OptExpr;

non terminal rs.etf.pp1.symboltable.concepts.Struct Condition, ConditionRepeatList, ConditionRepeat, CondTerm, CondFactRepeatList;
non terminal rs.etf.pp1.symboltable.concepts.Struct CondFact, OptRelopExpr, OptMinus, CondFactRepeat;

non terminal IfStart IfStart;

/*******************************************
********    Gramatika jezika    ************
********************************************/




precedence left ELSE ;


Program ::= (Program) PROGRAM ProgramName:programName ConstVarClassDeclList:C1 OP_L_BRACE_PARENTHESES MethodDeclList:M2 OP_R_BRACE_PARENTHESES {: RESULT=new Program(programName, C1, M2); RESULT.setLine(programNameleft); :} ;



ProgramName ::= (ProgramName) IDENTIFIKATOR:programName {: RESULT=new ProgramName(programName); RESULT.setLine(programNameleft); :};


ConstVarClassDeclList ::= (ConstVarClassDeclListConstDecl) ConstVarClassDeclList:C1 ConstDecl:C2 {: RESULT=new ConstVarClassDeclListConstDecl(C1, C2); RESULT.setLine(C1left); :}
                    |     (ConstVarClassDeclListVarDecl) ConstVarClassDeclList:C1 VarDecl:V2 {: RESULT=new ConstVarClassDeclListVarDecl(C1, V2); RESULT.setLine(C1left); :}
                    |     (ConstVarClassDeclListClassDecl) ConstVarClassDeclList:C1 ClassDecl:C2 {: RESULT=new ConstVarClassDeclListClassDecl(C1, C2); RESULT.setLine(C1left); :}
                    |     (ConstVarClassDeclListEpsilon) {: RESULT=new ConstVarClassDeclListEpsilon(); :} /* epsilon */
                    ;




// deklaracija konstanti
ConstDecl ::= (ConstDecl) CONST Type:T1 ConstDefinition:C2  ConstDeclRepeatList:C3  OP_SEMICOLN {: RESULT=new ConstDecl(T1, C2, C3); RESULT.setLine(T1left); :}  ;

ConstDefinition ::= (ConstDefinition) IDENTIFIKATOR:constName OP_EQUAL ConstValue:constValue {: RESULT=new ConstDefinition(constName, constValue); RESULT.setLine(constNameleft); :} ;

ConstDeclRepeatList ::= (ConstDeclRepeatListDeclared) ConstDeclRepeatList:C1 ConstDeclRepeat:C2 {: RESULT=new ConstDeclRepeatListDeclared(C1, C2); RESULT.setLine(C1left); :}
                    |   (ConstDeclRepeatListEpsilon) {: RESULT=new ConstDeclRepeatListEpsilon(); :}/* epsilon */ ;

ConstDeclRepeat ::= (ConstDeclRepeat) OP_COMMA ConstDefinition:C1 {: RESULT=new ConstDeclRepeat(C1); RESULT.setLine(C1left); :};



ConstValue ::=      (NumConst)  NUM_CONST:numConst {: RESULT=new NumConst(numConst); RESULT.setLine(numConstleft); :}
                |   (CharConst) CHAR_CONST:charConst {: RESULT=new CharConst(charConst); RESULT.setLine(charConstleft); :}
                |   (BoolConst) BOOL_CONST:boolConst {: RESULT=new BoolConst(boolConst); RESULT.setLine(boolConstleft); :}
                ;


// deklaracija promenljivih
VarDecl ::= (VarDecl) Type:T1 VarDeclDefinition:V2 VarDeclRepeatList:V3 OP_SEMICOLN {: RESULT=new VarDecl(T1, V2, V3); RESULT.setLine(T1left); :}  ;


VarDeclDefinition ::= (VarDeclDefinition) IDENTIFIKATOR:varName OptArrayDecl:isArray {: RESULT=new VarDeclDefinition(varName, isArray); RESULT.setLine(varNameleft); :} ;

VarDeclList ::= (VarDeclListDeclared) VarDeclList:V1 VarDecl:V2 {: RESULT=new VarDeclListDeclared(V1, V2); RESULT.setLine(V1left); :}
            |   (VarDeclListEpsilon) {: RESULT=new VarDeclListEpsilon(); :} /* epsilon */
            ;

VarDeclRepeatList ::= (VarDeclRepeatListDeclared) VarDeclRepeatList:V1 VarDeclRepeat:V2 {: RESULT=new VarDeclRepeatListDeclared(V1, V2); RESULT.setLine(V1left); :}
                    | (VarDeclRepeatListEpsilon) {: RESULT=new VarDeclRepeatListEpsilon(); :} /* epsilon */
                    ;

VarDeclRepeat ::= (VarDeclRepeat) OP_COMMA VarDeclDefinition:V1 {: RESULT=new VarDeclRepeat(V1); RESULT.setLine(V1left); :} ;

OptArrayDecl ::=  (OptArrayDeclared) OP_L_SQUARED_PARENTHESES OP_R_SQUARED_PARENTHESES {: RESULT=new OptArrayDeclared(); :}
                | (OptArrayDeclEpsilon) {: RESULT=new OptArrayDeclEpsilon(); :}/* epsilon */
                ;

Type ::= (Type) IDENTIFIKATOR:typeName {: RESULT=new Type(typeName); RESULT.setLine(typeNameleft); :} ;


// deklaracija klase
ClassDecl ::= (ClassDecl) CLASS ClassName:className OptExtends:O1 ClassDefinitionStart:C2 VarDeclList:V3 OptMethodDeclList:O4 ClassDefinitionEnd:C5 {: RESULT=new ClassDecl(className, O1, C2, V3, O4, C5); RESULT.setLine(classNameleft); :};

ClassDefinitionStart ::= (ClassDefinitionStart) OP_L_BRACE_PARENTHESES {: RESULT=new ClassDefinitionStart(); :};
ClassDefinitionEnd ::= (ClassDefinitionEnd) OP_R_BRACE_PARENTHESES {: RESULT=new ClassDefinitionEnd(); :};
ClassName ::= (ClassName) IDENTIFIKATOR:className {: RESULT=new ClassName(className); RESULT.setLine(classNameleft); :};


OptExtends ::= (OptExtendsExtended) EXTENDS Type:typeName {: RESULT=new OptExtendsExtended(typeName); RESULT.setLine(typeNameleft); :} | (OptExtendsEpsilon) {: RESULT=new OptExtendsEpsilon(); :} /* epsilon*/;

// deklaracija metoda
MethodDeclList ::= (MethodDeclListDeclared) MethodDeclList:M1  MethodDecl:M2 {: RESULT=new MethodDeclListDeclared(M1, M2); RESULT.setLine(M1left); :}
                |  (MethodDeclListEpsilon) {: RESULT=new MethodDeclListEpsilon(); :} /* epsilon */
                ;

OptMethodDeclList ::= (OptMethodDeclListDeclared) OP_L_BRACE_PARENTHESES MethodDeclList:M1 OP_R_BRACE_PARENTHESES {: RESULT=new OptMethodDeclListDeclared(M1); RESULT.setLine(M1left); :}
                    | (OptMethodDeclListEpsilon) {: RESULT=new OptMethodDeclListEpsilon(); :} /* epsilon */
                    ;


MethodDecl ::= (MethodDecl) ReturnType:R1 MethodName:M2  OP_L_PARENTHESES OptFormPars:O3 OP_R_PARENTHESES VarDeclList:V4 OP_L_BRACE_PARENTHESES StatementList:S5 OP_R_BRACE_PARENTHESES {: RESULT=new MethodDecl(R1, M2, O3, V4, S5); RESULT.setLine(R1left); :};




MethodName ::= (MethodName) IDENTIFIKATOR:methodName {: RESULT=new MethodName(methodName); RESULT.setLine(methodNameleft); :};

ReturnType ::= (ReturnNonVoid) Type:T1 {: RESULT=new ReturnNonVoid(T1); RESULT.setLine(T1left); :} | (ReturnTypeVoid) VOID {: RESULT=new ReturnTypeVoid(); :};

OptFormPars ::= (OptFormParsDeclared) FormPars:F1 {: RESULT=new OptFormParsDeclared(F1); RESULT.setLine(F1left); :} |  (OptFormParsEpsilon) {: RESULT=new OptFormParsEpsilon(); :} /* epsilon */;





// formalni parametri
FormPars ::= (FormPars) FormParDecl:F1 FormParsRepeatList:F2 {: RESULT=new FormPars(F1, F2); RESULT.setLine(F1left); :} ;
FormParDecl ::= (FormParDecl) Type:formParType IDENTIFIKATOR:formParName OptArrayDecl:O1 {: RESULT=new FormParDecl(formParType, formParName, O1); RESULT.setLine(formParTypeleft); :};

FormParsRepeatList ::= (FormParsRepeatListDeclared) FormParsRepeatList:F1 FormParsRepeat:F2 {: RESULT=new FormParsRepeatListDeclared(F1, F2); RESULT.setLine(F1left); :}
                    |  (FormParsRepeatListEpsilon) {: RESULT=new FormParsRepeatListEpsilon(); :}/* epsilon */
                    ;
FormParsRepeat ::= (FormParsRepeat) OP_COMMA FormParDecl:F1 {: RESULT=new FormParsRepeat(F1); RESULT.setLine(F1left); :} ;


// deklaracija iskaza

Statement ::= (StatementDesignator) DesignatorStatement:D1 OP_SEMICOLN {: RESULT=new StatementDesignator(D1); RESULT.setLine(D1left); :}
            | (IfElseStatement)     IfStart:I1 OP_L_PARENTHESES Condition:C2 OP_R_PARENTHESES Statement:S3 ELSE Statement:S4 {: RESULT=new IfElseStatement(I1, C2, S3, S4); RESULT.setLine(I1left); :}
            | (IfStatement)         IfStart:I1 OP_L_PARENTHESES Condition:C2 OP_R_PARENTHESES Statement:S3 {: RESULT=new IfStatement(I1, C2, S3); RESULT.setLine(I1left); :}
            | (DoWhileStatement)    DoWhileBegin:D1 Statement:S2 DoWhileEnd:D3 OP_L_PARENTHESES Condition:C4 OP_R_PARENTHESES OP_SEMICOLN {: RESULT=new DoWhileStatement(D1, S2, D3, C4); RESULT.setLine(D1left); :}
            | (BreakStatement)      BREAK OP_SEMICOLN {: RESULT=new BreakStatement(); :}
            | (ContinueStatement)   CONTINUE OP_SEMICOLN {: RESULT=new ContinueStatement(); :}
            | (ReturnStatement)     RETURN OptExpr:O1 OP_SEMICOLN {: RESULT=new ReturnStatement(O1); RESULT.setLine(O1left); :}
            | (ReadStatement)       READ OP_L_PARENTHESES Designator:D1 OP_R_PARENTHESES OP_SEMICOLN {: RESULT=new ReadStatement(D1); RESULT.setLine(D1left); :}
            | (PrintStatement)      PRINT OP_L_PARENTHESES Expr:E1 OptPrintNumConst:O2 OP_R_PARENTHESES OP_SEMICOLN {: RESULT=new PrintStatement(E1, O2); RESULT.setLine(E1left); :}
            | (EnclosedStatement)   OP_L_BRACE_PARENTHESES StatementList:S1 OP_R_BRACE_PARENTHESES {: RESULT=new EnclosedStatement(S1); RESULT.setLine(S1left); :}
            ;

IfStart ::= (IfStart) IF {: RESULT=new IfStart(); :};

StatementList ::= (StatementListDeclared) StatementList:S1 Statement:S2 {: RESULT=new StatementListDeclared(S1, S2); RESULT.setLine(S1left); :}
                | (StatementListEpsilon) {: RESULT=new StatementListEpsilon(); :}/*epsilon*/ ;


DoWhileBegin ::= (DoWhileBegin) DO {: RESULT=new DoWhileBegin(); :} ;
DoWhileEnd ::= (DoWhileEnd) WHILE {: RESULT=new DoWhileEnd(); :} ;

OptPrintNumConst ::=  (OptPrintNumConstDeclared) OP_COMMA NUM_CONST:numConst {: RESULT=new OptPrintNumConstDeclared(numConst); RESULT.setLine(numConstleft); :}
                    | (OptPrintNumConstEpsilon) {: RESULT=new OptPrintNumConstEpsilon(); :} /*epsilon*/
                    ;

OptExpr ::= (OptExprDeclared) Expr:E1 {: RESULT=new OptExprDeclared(E1); RESULT.setLine(E1left); :} | (OptExprEpsilon) {: RESULT=new OptExprEpsilon(); :} /*epsilon*/ ;

OptElseStatement ::=    (OptElseStatementDeclared) ELSE Statement:S1 {: RESULT=new OptElseStatementDeclared(S1); RESULT.setLine(S1left); :}
                        | (OptElseStatementEpsilon) {: RESULT=new OptElseStatementEpsilon(); :}/* epsilon */
                        ;

DesignatorStatement ::=     (DesignatorStatementAssign)     Designator:D1 OP_EQUAL Expr:E2 {: RESULT=new DesignatorStatementAssign(D1, E2); RESULT.setLine(D1left); :}
                        |   (DesignatorStatementActualPars) Designator:D1 OP_L_PARENTHESES OptActPars:O2 OP_R_PARENTHESES {: RESULT=new DesignatorStatementActualPars(D1, O2); RESULT.setLine(D1left); :}
                        |   (DesignatorStatementIncrement)  Designator:D1 OP_INCREMENT {: RESULT=new DesignatorStatementIncrement(D1); RESULT.setLine(D1left); :}
                        |   (DesignatorStatementDecrement)  Designator:D1 OP_DECREMENT {: RESULT=new DesignatorStatementDecrement(D1); RESULT.setLine(D1left); :}
                        ;

OptActPars ::= (OptActParsDeclared) ActPars:A1 {: RESULT=new OptActParsDeclared(A1); RESULT.setLine(A1left); :} | (OptActParsEpsilon) {: RESULT=new OptActParsEpsilon(); :} /* epsilon */ ;

ActPars ::= (ActPars) Expr:E1 ActParsRepeatList:A2 {: RESULT=new ActPars(E1, A2); RESULT.setLine(E1left); :} ;

ActParsRepeatList ::= (ActParsRepeatListDeclared) ActParsRepeatList:A1 ActParsRepeat:A2 {: RESULT=new ActParsRepeatListDeclared(A1, A2); RESULT.setLine(A1left); :}
                    | (ActParsRepeatListEpsilon) {: RESULT=new ActParsRepeatListEpsilon(); :} /* epsilon */
                    ;

ActParsRepeat ::= (ActParsRepeat) OP_COMMA Expr:E1 {: RESULT=new ActParsRepeat(E1); RESULT.setLine(E1left); :} ;

// gramatika uslova

Condition ::= (Condition) CondTerm:C1 ConditionRepeatList:C2 {: RESULT=new Condition(C1, C2); RESULT.setLine(C1left); :} ;

ConditionRepeatList ::=     (ConditionRepeatListDeclared) ConditionRepeatList:C1 ConditionRepeat:C2 {: RESULT=new ConditionRepeatListDeclared(C1, C2); RESULT.setLine(C1left); :}
                        |   (ConditionRepeatListEpsilon) {: RESULT=new ConditionRepeatListEpsilon(); :} /* epsilon */
                        ;
ConditionRepeat ::= (ConditionRepeat) OP_LOGIC_OR CondTerm:C1 {: RESULT=new ConditionRepeat(C1); RESULT.setLine(C1left); :} ;

CondTerm ::= (CondTerm) CondFact:C1 CondFactRepeatList:C2 {: RESULT=new CondTerm(C1, C2); RESULT.setLine(C1left); :};

CondFactRepeatList ::=      (CondFactRepeatListDeclared) CondFactRepeatList:C1 CondFactRepeat:C2 {: RESULT=new CondFactRepeatListDeclared(C1, C2); RESULT.setLine(C1left); :}
                        |   (CondFactRepeatListEpsilon) {: RESULT=new CondFactRepeatListEpsilon(); :} /* epsilon */
                        ;

CondFactRepeat ::= (CondFactRepeat) OP_LOGIC_AND CondFact:C1 {: RESULT=new CondFactRepeat(C1); RESULT.setLine(C1left); :} ;

CondFact ::= (CondFact) Expr:E1 OptRelopExpr:O2 {: RESULT=new CondFact(E1, O2); RESULT.setLine(E1left); :};

OptRelopExpr ::=  (OptRelopExprDeclared) Relop:R1 Expr:E2 {: RESULT=new OptRelopExprDeclared(R1, E2); RESULT.setLine(R1left); :}
                | (OptRelopExprEpsilon) {: RESULT=new OptRelopExprEpsilon(); :} /* epsilon */
                ;

// gramatika izraza
Expr ::= (Expr) OptMinus:O1 Term:T2 AddopTermList:A3 {: RESULT=new Expr(O1, T2, A3); RESULT.setLine(O1left); :} ;

OptMinus ::=    (OptMinusDeclared) OP_SUBTRACTION {: RESULT=new OptMinusDeclared(); :}
            |   (OptMinusEpsilon) {: RESULT=new OptMinusEpsilon(); :} /* epsilon */
            ;

AddopTermList ::= (AddopTermListDeclared) AddopTermList:A1 AddopTerm:A2 {: RESULT=new AddopTermListDeclared(A1, A2); RESULT.setLine(A1left); :}
                | (AddopTermListEpsilon) {: RESULT=new AddopTermListEpsilon(); :} /*epsilon*/
                ;

AddopTerm ::= (AddopTerm) Addop:A1 Term:T2 {: RESULT=new AddopTerm(A1, T2); RESULT.setLine(A1left); :} ;


Term ::= (Term) Factor:F1 MulopFactorList:M2 {: RESULT=new Term(F1, M2); RESULT.setLine(F1left); :} ;

MulopFactorList ::= (MulopFactorListDeclared) MulopFactorList:M1 MulopFactor:M2 {: RESULT=new MulopFactorListDeclared(M1, M2); RESULT.setLine(M1left); :}
                |   (MulopFactorListEpsilon) {: RESULT=new MulopFactorListEpsilon(); :} /* epsilon */
                ;

MulopFactor ::= (MulopFactor) Mulop:M1 Factor:F2 {: RESULT=new MulopFactor(M1, F2); RESULT.setLine(M1left); :} ;

Factor ::=      (FactorFuncCallOrVar)   Designator:D1 OptParenthesesActPars:O2 {: RESULT=new FactorFuncCallOrVar(D1, O2); RESULT.setLine(D1left); :}
            |   (FactorConst)           ConstValue:C1 {: RESULT=new FactorConst(C1); RESULT.setLine(C1left); :}
            |   (FactorNew)             NEW Type:T1 OptArrExpr:O2 {: RESULT=new FactorNew(T1, O2); RESULT.setLine(T1left); :}
            |   (FactorExpr)            OP_L_PARENTHESES Expr:E1 OP_R_PARENTHESES {: RESULT=new FactorExpr(E1); RESULT.setLine(E1left); :}
            ;

OptArrExpr ::= (OptArrExprDeclared) OP_L_SQUARED_PARENTHESES Expr:E1 OP_R_SQUARED_PARENTHESES {: RESULT=new OptArrExprDeclared(E1); RESULT.setLine(E1left); :}
             | (OptArrExprEpsilon) {: RESULT=new OptArrExprEpsilon(); :} /*epsilon*/
             ;

OptParenthesesActPars ::= (OptParenthesesActParsDeclared) OP_L_PARENTHESES OptActPars:O1 OP_R_PARENTHESES {: RESULT=new OptParenthesesActParsDeclared(O1); RESULT.setLine(O1left); :}
                        | (OptParenthesesActParsEpsilon) {: RESULT=new OptParenthesesActParsEpsilon(); :} /*epsilon*/
                        ;

Designator ::= (Designator) DesignatorInitialName:D1 DesignatorRepeatList:D2 {: RESULT=new Designator(D1, D2); RESULT.setLine(D1left); :} ;

DesignatorInitialName ::= (DesignatorInitialName) IDENTIFIKATOR:designatorName {: RESULT=new DesignatorInitialName(designatorName); RESULT.setLine(designatorNameleft); :};

DesignatorRepeatList ::= (DesignatorRepeatListDeclared)  DesignatorRepeatList:D1 DesignatorRepeat:D2 {: RESULT=new DesignatorRepeatListDeclared(D1, D2); RESULT.setLine(D1left); :}
                       | (DesignatorRepeatListEpsilon) {: RESULT=new DesignatorRepeatListEpsilon(); :} /* epsilon */
                       ;

DesignatorRepeat ::=  (DesignatorRepeatField) OP_DOT IDENTIFIKATOR:fieldName {: RESULT=new DesignatorRepeatField(fieldName); RESULT.setLine(fieldNameleft); :}
                    | (DesignatorRepeatExpr)  OP_L_SQUARED_PARENTHESES Expr:E1 OP_R_SQUARED_PARENTHESES {: RESULT=new DesignatorRepeatExpr(E1); RESULT.setLine(E1left); :}
                    ;

Relop ::= (RelopEquals)         OP_EQUALS {: RESULT=new RelopEquals(); :}
        | (RelopNotEquals)      OP_NOT_EQUALS {: RESULT=new RelopNotEquals(); :}
        | (RelopGreater)        OP_GREATER {: RESULT=new RelopGreater(); :}
        | (RelopGreaterEqual)   OP_GREATER_EQUAL {: RESULT=new RelopGreaterEqual(); :}
        | (RelopLesser)         OP_LESSER {: RESULT=new RelopLesser(); :}
        | (RelopLesserEqual)    OP_LESSER_EQUAL {: RESULT=new RelopLesserEqual(); :}
        ;

Addop ::= (AddopAddition) OP_ADDITION {: RESULT=new AddopAddition(); :} | (AddopSubtraction) OP_SUBTRACTION {: RESULT=new AddopSubtraction(); :} ;

Mulop ::= (MulopMultiplication) OP_MULTIPLICATION {: RESULT=new MulopMultiplication(); :}
        | (MulopDivision)       OP_DIVISION {: RESULT=new MulopDivision(); :}
        | (MulopModuo)          OP_MODUO {: RESULT=new MulopModuo(); :}
        ;






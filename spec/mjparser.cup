
package ba140645d.mjcompiler;

import java_cup.runtime.*;
import java.io.*;
import org.apache.log4j.*;

parser code {:

	boolean errorDetected = false;

	Logger log = Logger.getLogger(getClass());


    // slede redefinisani metodi za prijavu gresaka radi izmene teksta poruke

    public void report_fatal_error(String message, Object info) throws java.lang.Exception {
      done_parsing();
      report_error(message, info);
    }

    public void syntax_error(Symbol cur_token) {
        report_error("\nSintaksna greska", cur_token);
    }

    public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
        report_fatal_error("Fatalna greska, parsiranje se ne moze nastaviti", cur_token);
    }

    public void report_error(String message, Object info) {
    	errorDetected = true;
    	StringBuilder msg = new StringBuilder(message);
    	if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left);
        log.error(msg.toString());
    }

    public void report_info(String message, Object info) {
    	StringBuilder msg = new StringBuilder(message);
    	if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left);
        log.info(msg.toString());
    }

:}

scan with {:
	Symbol s = this.getScanner().next_token();
	if (s != null && s.value != null)
		log.info(s.toString() + " " + s.value.toString());
	return s;
:}


/*******************************************
********    Terminalni simboli    **********
********************************************/

// kljucne reci
terminal PROGRAM, BREAK, CLASS, ELSE, IF, NEW, PRINT, READ, RETURN, VOID, DO, WHILE, EXTENDS, CONTINUE, CONST ;

// identifikator
terminal IDENTIFIKATOR;

// konstante
terminal NUM_CONST, CHAR_CONST, BOOL_CONST;

// Addop operatori
terminal OP_ADDITION, OP_SUBTRACTION ;

// mulop operatori
terminal OP_MULTIPLICATION, OP_DIVISION, OP_MODUO ;

// relop operatori
terminal OP_EQUALS, OP_NOT_EQUALS, OP_GREATER, OP_GREATER_EQUAL, OP_LESSER, OP_LESSER_EQUAL;

// logic operatori
terminal OP_LOGIC_AND, OP_LOGIC_OR ;

// operator dodele,inkrement, dekrement, tacka-zarez, zarez, tacka
terminal OP_EQUAL, OP_INCREMENT, OP_DECREMENT, OP_SEMICOLN, OP_COMMA, OP_DOT;

// operatori zagrade
terminal OP_L_PARENTHESES, OP_R_PARENTHESES, OP_L_SQUARED_PARENTHESES, OP_R_SQUARED_PARENTHESES, OP_L_BRACE_PARENTHESES, OP_R_BRACE_PARENTHESES;

/*********************************************
********    Neterminalni simboli    **********
**********************************************/


non terminal Program, ConstVarClassDeclList, ConstDecl, ConstDeclRepeatList, ConstDeclRepeat, NumCharBoolConst ;
non terminal VarDecl, VarDeclList, VarDeclRepeatList, VarDeclRepeat, OptArrayDecl, Type, StatementList;
non terminal ClassDecl, OptExtends, OptMethodDeclList ;
non terminal MethodDeclList, MethodDecl, ReturnType, OptFormPars ;
non terminal FormPars, FormParsRepeatList, FormParsRepeat ;

non terminal Statement, OptElseStatement, DesignatorStatement, OptActPars, ActPars, ActParsRepeatList, ActParsRepeat ;
non terminal Condition, ConditionRepeatList, ConditionRepeat, CondTerm, CondFactRepeatList;
non terminal CondFact, OptRelopExpr, Expr, OptMinus, AddopTermList, AddopTerm, Term, CondFactRepeat;
non terminal MulopFactorList, MulopFactor, Factor, Designator, DesignatorRepeatList, DesignatorRepeat;
non terminal Relop, Addop, Mulop;

non terminal OptExpr, OptPrintNumConst,OptParenthesesActPars, OptArrExpr ;


/*******************************************
********    Gramatika jezika    ************
********************************************/


precedence left ELSE ;
Program ::= PROGRAM IDENTIFIKATOR ConstVarClassDeclList OP_L_BRACE_PARENTHESES MethodDeclList OP_R_BRACE_PARENTHESES ;

ConstVarClassDeclList ::= ConstVarClassDeclList ConstDecl
                    | ConstVarClassDeclList VarDecl
                    | ConstVarClassDeclList ClassDecl
                    | /* epsilon */ ;

// deklaracija konstanti
ConstDecl ::= CONST Type IDENTIFIKATOR OP_EQUAL NumCharBoolConst ConstDeclRepeatList  OP_SEMICOLN  ;

ConstDeclRepeatList ::= ConstDeclRepeatList ConstDeclRepeat | /* epsilon */ ;
ConstDeclRepeat ::= OP_COMMA IDENTIFIKATOR OP_EQUAL NumCharBoolConst;

NumCharBoolConst ::= NUM_CONST
                    | CHAR_CONST
                    | BOOL_CONST
                    ;


// deklaracija promenljivih
VarDecl ::= Type IDENTIFIKATOR OptArrayDecl VarDeclRepeatList OP_SEMICOLN  ;
VarDeclList ::= VarDeclList VarDecl | /* epsilon */ ;
VarDeclRepeatList ::= VarDeclRepeatList VarDeclRepeat | /* epsilon */ ;
VarDeclRepeat ::= OP_COMMA IDENTIFIKATOR  OptArrayDecl ;


OptArrayDecl ::= OP_L_SQUARED_PARENTHESES OP_R_SQUARED_PARENTHESES  | /* epsilon */ ;

Type ::= IDENTIFIKATOR ;


// deklaracija klase

ClassDecl ::= CLASS IDENTIFIKATOR OptExtends OP_L_BRACE_PARENTHESES VarDeclList OptMethodDeclList OP_R_BRACE_PARENTHESES ;

OptExtends ::= EXTENDS Type | /* epsilon*/ ;
OptMethodDeclList ::= OP_L_BRACE_PARENTHESES MethodDeclList OP_R_BRACE_PARENTHESES | /* epsilon */ ;



// deklaracija metoda
MethodDeclList ::= MethodDeclList  MethodDecl | /* epsilon */ ;

MethodDecl ::= ReturnType IDENTIFIKATOR  OP_L_PARENTHESES OptFormPars OP_R_PARENTHESES VarDeclList OP_L_BRACE_PARENTHESES StatementList OP_R_BRACE_PARENTHESES  ;
ReturnType ::= Type | VOID ;

OptFormPars ::= FormPars |  /* epsilon */;
StatementList ::= StatementList Statement | /*epsilon*/ ;


// formalni parametri
FormPars ::= Type IDENTIFIKATOR OptArrayDecl FormParsRepeatList ;
FormParsRepeatList ::= FormParsRepeatList FormParsRepeat | /* epsilon */ ;
FormParsRepeat ::= OP_COMMA Type IDENTIFIKATOR OptArrayDecl ;


// deklaracija iskaza

Statement ::= DesignatorStatement OP_SEMICOLN
            | IF OP_L_PARENTHESES Condition OP_R_PARENTHESES Statement ELSE Statement
            | IF OP_L_PARENTHESES Condition OP_R_PARENTHESES Statement
            | DO Statement WHILE OP_L_PARENTHESES Condition OP_R_PARENTHESES OP_SEMICOLN
            | BREAK OP_SEMICOLN
            | CONTINUE OP_SEMICOLN
            | RETURN OptExpr OP_SEMICOLN
            | READ OP_L_PARENTHESES Designator OP_R_PARENTHESES OP_SEMICOLN
            | PRINT OP_L_PARENTHESES Expr OptPrintNumConst OP_R_PARENTHESES OP_SEMICOLN
            | OP_L_BRACE_PARENTHESES StatementList OP_R_BRACE_PARENTHESES
            ;

OptPrintNumConst ::= OP_COMMA NUM_CONST | /*epsilon*/ ;
OptExpr ::= Expr | /*epsilon*/ ;

OptElseStatement ::= ELSE Statement | /* epsilon */ ;

DesignatorStatement ::= Designator OP_EQUAL Expr
                        | Designator OP_L_PARENTHESES OptActPars OP_R_PARENTHESES
                        | Designator OP_INCREMENT
                        | Designator OP_DECREMENT
                        ;

OptActPars ::= ActPars | /* epsilon */ ;

ActPars ::= Expr ActParsRepeatList ;
ActParsRepeatList ::= ActParsRepeatList ActParsRepeat | /* epsilon */ ;
ActParsRepeat ::= OP_COMMA Expr ;

// gramatika uslova

Condition ::= CondTerm ConditionRepeatList ;
ConditionRepeatList ::= ConditionRepeatList ConditionRepeat | /* epsilon */ ;
ConditionRepeat ::= OP_LOGIC_OR CondTerm ;

CondTerm ::= CondFact CondFactRepeatList;
CondFactRepeatList ::= CondFactRepeatList CondFactRepeat | /* epsilon */ ;
CondFactRepeat ::= OP_LOGIC_AND CondFact ;

CondFact ::= Expr OptRelopExpr;
OptRelopExpr ::= Relop Expr | /* epsilon */ ;


Expr ::= OptMinus Term AddopTermList ;
OptMinus ::= OP_SUBTRACTION | /* epsilon */ ;

AddopTermList ::= AddopTermList AddopTerm | /* epsilon */ ;
AddopTerm ::= Addop Term ;


Term ::= Factor MulopFactorList ;

MulopFactorList ::= MulopFactorList MulopFactor | /* epsilon */ ;
MulopFactor ::= Mulop Factor ;

Factor ::=    Designator OptParenthesesActPars
            | NUM_CONST
            | CHAR_CONST
            | BOOL_CONST
            | NEW Type OptArrExpr
            | OP_L_PARENTHESES Expr OP_R_PARENTHESES
            ;

OptArrExpr ::= OP_L_SQUARED_PARENTHESES Expr OP_R_SQUARED_PARENTHESES | /*epsilon*/ ;

OptParenthesesActPars ::= OP_L_PARENTHESES OptActPars OP_R_PARENTHESES | /*epsilon*/;

Designator ::= IDENTIFIKATOR DesignatorRepeatList ;



DesignatorRepeatList ::= DesignatorRepeatList DesignatorRepeat | /* epsilon */ ;
DesignatorRepeat ::=  OP_DOT IDENTIFIKATOR
                    | OP_L_SQUARED_PARENTHESES Expr OP_R_SQUARED_PARENTHESES
                    ;

Relop ::= OP_EQUALS
        | OP_NOT_EQUALS
        | OP_GREATER
        | OP_GREATER_EQUAL
        | OP_LESSER
        | OP_LESSER_EQUAL
        ;

Addop ::= OP_ADDITION | OP_SUBTRACTION ;

Mulop ::= OP_MULTIPLICATION | OP_DIVISION | OP_MODUO ;






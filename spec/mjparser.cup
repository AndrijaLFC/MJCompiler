
package ba140645d.mjcompiler.ast;

import java_cup.runtime.*;
import java.io.*;
import org.apache.log4j.*;

parser code {:

	boolean errorDetected = false;

	Logger log = Logger.getLogger(getClass());


    // slede redefinisani metodi za prijavu gresaka radi izmene teksta poruke

    public void report_fatal_error(String message, Object info) throws java.lang.Exception {
      done_parsing();
      report_error(message, info);
    }

    public void syntax_error(Symbol cur_token) {
        report_error("\nSintaksna greska", cur_token);
    }

    public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
        report_fatal_error("Fatalna greska, parsiranje se ne moze nastaviti", cur_token);
    }

    public void report_error(String message, Object info) {
    	errorDetected = true;
    	StringBuilder msg = new StringBuilder(message);
    	if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left);
        log.error(msg.toString());
    }

    public void report_info(String message, Object info) {
    	StringBuilder msg = new StringBuilder(message);
    	if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left);
        log.info(msg.toString());
    }

:}

scan with {:
	Symbol s = this.getScanner().next_token();
	if (s != null && s.value != null)
		log.info(s.toString() + " " + s.value.toString());
	return s;
:}


/*******************************************
********    Terminalni simboli    **********
********************************************/

// kljucne reci
terminal PROGRAM, BREAK, CLASS, ELSE, IF, NEW, PRINT, READ, RETURN, VOID, DO, WHILE, EXTENDS, CONTINUE, CONST ;

// identifikator
terminal IDENTIFIKATOR;

// konstante
terminal NUM_CONST, CHAR_CONST, BOOL_CONST;

// Addop operatori
terminal OP_ADDITION, OP_SUBTRACTION ;

// mulop operatori
terminal OP_MULTIPLICATION, OP_DIVISION, OP_MODUO ;

// relop operatori
terminal OP_EQUALS, OP_NOT_EQUALS, OP_GREATER, OP_GREATER_EQUAL, OP_LESSER, OP_LESSER_EQUAL;

// logic operatori
terminal OP_LOGIC_AND, OP_LOGIC_OR ;

// operator dodele,inkrement, dekrement, tacka-zarez, zarez, tacka
terminal OP_EQUAL, OP_INCREMENT, OP_DECREMENT, OP_SEMICOLN, OP_COMMA, OP_DOT;

// operatori zagrade
terminal OP_L_PARENTHESES, OP_R_PARENTHESES, OP_L_SQUARED_PARENTHESES, OP_R_SQUARED_PARENTHESES, OP_L_BRACE_PARENTHESES, OP_R_BRACE_PARENTHESES;

/*********************************************
********    Neterminalni simboli    **********
**********************************************/


non terminal Program, ConstVarClassDeclList, ConstDecl, ConstDeclRepeatList, ConstDeclRepeat, NumCharBoolConst;
non terminal VarDecl, VarDeclList, VarDeclRepeatList, VarDeclRepeat, OptArrayDecl, Type, StatementList;
non terminal ClassDecl, OptExtends, OptMethodDeclList;
non terminal MethodDeclList, MethodDecl, ReturnType, OptFormPars;
non terminal FormPars, FormParsRepeatList, FormParsRepeat;

non terminal Statement, OptElseStatement, DesignatorStatement, OptActPars, ActPars, ActParsRepeatList, ActParsRepeat;
non terminal Condition, ConditionRepeatList, ConditionRepeat, CondTerm, CondFactRepeatList;
non terminal CondFact, OptRelopExpr, Expr, OptMinus, AddopTermList, AddopTerm, Term, CondFactRepeat;
non terminal MulopFactorList, MulopFactor, Factor, Designator, DesignatorRepeatList, DesignatorRepeat;
non terminal Relop, Addop, Mulop;
non terminal ProgramName, ClassName;

non terminal OptExpr, OptPrintNumConst, OptParenthesesActPars, OptArrExpr, ConstDefinition;
non terminal VarDeclDefinition;
non terminal MethodName;
non terminal FormParDecl;
non terminal ConstValue;
non terminal DoWhileBegin;
non terminal DoWhileEnd;

/*******************************************
********    Gramatika jezika    ************
********************************************/


precedence left ELSE ;

Program ::= (Program) PROGRAM ProgramName:programName ConstVarClassDeclList OP_L_BRACE_PARENTHESES MethodDeclList OP_R_BRACE_PARENTHESES ;

ProgramName ::= IDENTIFIKATOR:programName;

ConstVarClassDeclList ::= (ConstVarClassDeclListConstDecl) ConstVarClassDeclList ConstDecl
                    |     (ConstVarClassDeclListVarDecl) ConstVarClassDeclList VarDecl
                    |     (ConstVarClassDeclListClassDecl) ConstVarClassDeclList ClassDecl
                    |     (ConstVarClassDeclListEpsilon) /* epsilon */ ;


// deklaracija konstanti
ConstDecl ::= (ConstDecl) CONST Type ConstDefinition  ConstDeclRepeatList  OP_SEMICOLN  ;

ConstDefinition ::= (ConstDefinition) IDENTIFIKATOR:constName OP_EQUAL NumCharBoolConst:constValue ;

ConstDeclRepeatList ::= (ConstDeclRepeatList) ConstDeclRepeatList ConstDeclRepeat | /* epsilon */ ;
ConstDeclRepeat ::= (ConstDeclRepeat) OP_COMMA ConstDefinition;

NumCharBoolConst ::= ConstValue;

ConstValue ::=      (NumConst)  NUM_CONST:numConst
                |   (CharConst) CHAR_CONST:charConst
                |   (BoolConst) BOOL_CONST:boolConst
                ;

// deklaracija promenljivih
VarDecl ::= Type VarDeclDefinition VarDeclRepeatList OP_SEMICOLN  ;

VarDeclDefinition ::= IDENTIFIKATOR:varName OptArrayDecl:isArray;

VarDeclList ::= (VarDeclList) VarDeclList VarDecl | (VarDeclListEpsilon) /* epsilon */ ;
VarDeclRepeatList ::= (VarDeclRepeatList) VarDeclRepeatList VarDeclRepeat | (VarDeclRepeatListEpsilon) /* epsilon */ ;
VarDeclRepeat ::= (VarDeclRepeat) OP_COMMA VarDeclDefinition;

OptArrayDecl ::= (OptArrayDecl) OP_L_SQUARED_PARENTHESES OP_R_SQUARED_PARENTHESES  | (OptArrayDeclEpsilon)/* epsilon */ ;

Type ::= (Type) IDENTIFIKATOR:typeName ;


// deklaracija klase
ClassDecl ::= (ClassDecl) CLASS ClassName:className OptExtends OP_L_BRACE_PARENTHESES VarDeclList OptMethodDeclList OP_R_BRACE_PARENTHESES ;
ClassName ::= (ClassName) IDENTIFIKATOR:className;


OptExtends ::= (OptExtends) EXTENDS Type:typeName | (OptExtendsEpsilon) /* epsilon*/;

// deklaracija metoda
MethodDeclList ::= (MethodDeclList) MethodDeclList  MethodDecl | (MethodDeclListEpsilon) /* epsilon */ ;

OptMethodDeclList ::= (OptMethodDeclList) OP_L_BRACE_PARENTHESES MethodDeclList OP_R_BRACE_PARENTHESES | (OptMethodDeclListEpsilon) /* epsilon */ ;


MethodDecl ::= (MethodDecl) ReturnType MethodName  OP_L_PARENTHESES OptFormPars OP_R_PARENTHESES VarDeclList OP_L_BRACE_PARENTHESES StatementList OP_R_BRACE_PARENTHESES;

MethodName ::= (MethodName) IDENTIFIKATOR:methodName ;

ReturnType ::= (ReturnType) Type | (ReturnTypeVoid) VOID;

OptFormPars ::= (OptFormPars) FormPars |  (OptFormParsEpsilon) /* epsilon */;




// formalni parametri
FormPars ::= (FormPars) FormParDecl FormParsRepeatList ;
FormParDecl ::= (FormParDecl) Type:formParType IDENTIFIKATOR:formParName OptArrayDecl;

FormParsRepeatList ::= (FormParsRepeatList) FormParsRepeatList FormParsRepeat | (FormParsRepeatListEpsilon   )/* epsilon */ ;
FormParsRepeat ::= (FormParsRepeat) OP_COMMA FormParDecl ;


// deklaracija iskaza

Statement ::= (StatementDesignator) DesignatorStatement OP_SEMICOLN
            | (IfElseStatement)     IF OP_L_PARENTHESES Condition OP_R_PARENTHESES Statement ELSE Statement
            | (IfStatement)         IF OP_L_PARENTHESES Condition OP_R_PARENTHESES Statement
            | (DoWhileStatement)    DoWhileBegin Statement DoWhileEnd OP_L_PARENTHESES Condition OP_R_PARENTHESES OP_SEMICOLN
            | (BreakStatement)      BREAK OP_SEMICOLN
            | (ContinueStatement)   CONTINUE OP_SEMICOLN
            | (ReturnStatement)     RETURN OptExpr OP_SEMICOLN
            | (ReadStatement)       READ OP_L_PARENTHESES Designator OP_R_PARENTHESES OP_SEMICOLN
            | (PrintStatement)      PRINT OP_L_PARENTHESES Expr OptPrintNumConst OP_R_PARENTHESES OP_SEMICOLN
            | (EnclosedStatement)   OP_L_BRACE_PARENTHESES StatementList OP_R_BRACE_PARENTHESES
            ;

StatementList ::= (StatementList) StatementList Statement | (StatementListEpsilon)/*epsilon*/ ;


DoWhileBegin ::= DO ;
DoWhileEnd ::= WHILE ;

OptPrintNumConst ::= (OptPrintNumConst) OP_COMMA NUM_CONST | (OptPrintNumConstEpsilon) /*epsilon*/ ;

OptExpr ::= (OptExpr) Expr | (OptExprEpsilon) /*epsilon*/ ;

OptElseStatement ::= (OptElseStatement) ELSE Statement | (OptElseStatementEpsilon)/* epsilon */ ;

DesignatorStatement ::=     (DesignatorStatementAssign)     Designator OP_EQUAL Expr
                        |   (DesignatorStatementActualPars) Designator OP_L_PARENTHESES OptActPars OP_R_PARENTHESES
                        |   (DesignatorStatementIncrement)  Designator OP_INCREMENT
                        |   (DesignatorStatementDecrement)  Designator OP_DECREMENT
                        ;

OptActPars ::= (OptActPars) ActPars | (OptActParsEpsilon) /* epsilon */ ;

ActPars ::= (ActPars) Expr ActParsRepeatList ;

ActParsRepeatList ::= (ActParsRepeatList) ActParsRepeatList ActParsRepeat | (ActParsRepeatListEpsilon) /* epsilon */ ;

ActParsRepeat ::= (ActParsRepeat) OP_COMMA Expr ;

// gramatika uslova

Condition ::= (Condition) CondTerm ConditionRepeatList ;

ConditionRepeatList ::=     (ConditionRepeatList) ConditionRepeatList ConditionRepeat
                        |   (ConditionRepeatListEpsilon) /* epsilon */
                        ;
ConditionRepeat ::= (ConditionRepeat) OP_LOGIC_OR CondTerm ;

CondTerm ::= (CondTerm) CondFact CondFactRepeatList;

CondFactRepeatList ::=      (CondFactRepeatList) CondFactRepeatList CondFactRepeat
                        |   (CondFactRepeatListEpsilon) /* epsilon */
                        ;

CondFactRepeat ::= (CondFactRepeat) OP_LOGIC_AND CondFact ;

CondFact ::= (CondFact) Expr OptRelopExpr;
OptRelopExpr ::= (OptRelopExpr) Relop Expr | (OptRelopExprEpsilon) /* epsilon */ ;


Expr ::= (Expr) OptMinus Term AddopTermList ;
OptMinus ::= (OptMinus) OP_SUBTRACTION | (OptMinusEpsilon) /* epsilon */ ;

AddopTermList ::= (AddopTermList) AddopTermList AddopTerm | (AddopTermListEpsilon) /*epsilon*/;
AddopTerm ::= (AddopTerm) Addop Term ;


Term ::= Factor MulopFactorList ;

MulopFactorList ::= MulopFactorList MulopFactor | /* epsilon */ ;
MulopFactor ::= Mulop Factor ;

Factor ::=      (FactorFuncCal)   Designator OptParenthesesActPars
            |   (FactorConst)     ConstValue
            |   (FactorNew)       NEW Type OptArrExpr
            |   (FactorExpr)      OP_L_PARENTHESES Expr OP_R_PARENTHESES
            ;

OptArrExpr ::= (OptArrExpr) OP_L_SQUARED_PARENTHESES Expr OP_R_SQUARED_PARENTHESES
             | (OptArrExprEpsilon) /*epsilon*/
             ;

OptParenthesesActPars ::= (OptParenthesesActPars) OP_L_PARENTHESES OptActPars OP_R_PARENTHESES
                        | (OptParenthesesActParsEpsilon) /*epsilon*/
                        ;

Designator ::= (Designator) IDENTIFIKATOR:designatorName DesignatorRepeatList ;



DesignatorRepeatList ::= (DesignatorRepeatList) DesignatorRepeatList DesignatorRepeat
                       | (DesignatorRepeatListEpsilon) /* epsilon */
                       ;

DesignatorRepeat ::=  (DesignatorRepeatField) OP_DOT IDENTIFIKATOR:fieldName
                    | (DesignatorRepeatExpr)  OP_L_SQUARED_PARENTHESES Expr OP_R_SQUARED_PARENTHESES
                    ;

Relop ::= (RelopEquals)         OP_EQUALS
        | (RelopNotEquals)      OP_NOT_EQUALS
        | (RelopGreater)        OP_GREATER
        | (RelopGreaterEqual)   OP_GREATER_EQUAL
        | (RelopLesser)         OP_LESSER
        | (RelopLesserEqual)    OP_LESSER_EQUAL
        ;

Addop ::= (AddopAddition) OP_ADDITION | (AddopSubtraction) OP_SUBTRACTION ;

Mulop ::= (MulopMultiplication) OP_MULTIPLICATION
        | (MulopDivision)       OP_DIVISION
        | (MulopModuo)          OP_MODUO
        ;





